// NV38Box (http://inferno.hildebrand.cz)
// Copyright (c) 2004 Antonin Hildebrand
// licensed under zlib/libpng license (see license.txt)
// released in Shader Triathlon – Summer 2004 ("Contest")

// SHADED SECONDARY RAYS
#include "constants.h"
#include "defines.h"

// main shader
float4 main(
            float3 WPos : WPOS,
            float2 Tex0 : TEX0,
            float2 Tex1 : TEX1,
            uniform samplerRECT rays : TEXUNIT0,
            uniform samplerRECT basic : TEXUNIT1,
            uniform samplerRECT colors : TEXUNIT2,
            uniform sampler2D material : TEXUNIT3,
            uniform samplerRECT uvinfo : TEXUNIT4,
            uniform samplerRECT tridata : TEXUNIT5,
            uniform float3 WLightPos[2]
            ) : COLOR
{
  float4 ray = texRECT(rays, Tex0);  
  //float4 pixel = texRECT(basic, Tex1);

  half2 tri_addr = unpack_2half(ray.w);
  half2 tri_uv = unpack_2half(ray.z);

  float4 uv = texRECT(uvinfo, tri_addr);
  half2 uva = unpack_2half(uv.x);
  half2 uvb = unpack_2half(uv.y);
  half2 uvc = unpack_2half(uv.z);
  half2 tri_coef = unpack_2half(uv.w); 
  
  //half2 parent_addr = unpack_2half(ray.y);
  //float4 parent_uv = texRECT(uvinfo, parent_addr);
  //half2 parent_coef = unpack_2half(parent_uv.w); 
  half2 parent_coef = unpack_2half(ray.y); 

  float3 barycoord = float3(tri_uv.x, tri_uv.y, 1-tri_uv.x-tri_uv.y);
  float2 uvr = uva*barycoord.z + uvb*barycoord.x + uvc*barycoord.y;
  float4 mat = tex2D(material, uvr);

  // lighting
  // musi se provadet ve world space s vyuzitim transformovanych normal
  // 3x fetch normaly, vypocitani prumeru pomoci barycoord
  // 3x fetch pozice, vypocitani pozice
  // vypocet 2x
  // lightdir
  // dot lightdir s normalou
  // modulace mat podle vysledku

  float3 na = texRECT(tridata, float2(RTRF_BUFFER_TRANSFORMEDANORMAL_PX, RTRF_BUFFER_TRANSFORMEDANORMAL_PY)+tri_addr).xyz;
  float3 nb = texRECT(tridata, float2(RTRF_BUFFER_TRANSFORMEDBNORMAL_PX, RTRF_BUFFER_TRANSFORMEDBNORMAL_PY)+tri_addr).xyz;
  float3 nc = texRECT(tridata, float2(RTRF_BUFFER_TRANSFORMEDCNORMAL_PX, RTRF_BUFFER_TRANSFORMEDCNORMAL_PY)+tri_addr).xyz;

  float3 va = texRECT(tridata, float2(RTRF_BUFFER_TRANSFORMEDAPOSITION_PX, RTRF_BUFFER_TRANSFORMEDAPOSITION_PY)+tri_addr).xyz;
  float3 vb = texRECT(tridata, float2(RTRF_BUFFER_TRANSFORMEDBPOSITION_PX, RTRF_BUFFER_TRANSFORMEDBPOSITION_PY)+tri_addr).xyz;
  float3 vc = texRECT(tridata, float2(RTRF_BUFFER_TRANSFORMEDCPOSITION_PX, RTRF_BUFFER_TRANSFORMEDCPOSITION_PY)+tri_addr).xyz;

  float3 nr = normalize(na*barycoord.z + nb*barycoord.x + nc*barycoord.y);
  float3 vr = va*barycoord.z + vb*barycoord.x + vc*barycoord.y;

  // light 1
  float3 lightdir1 = normalize(WLightPos[0] - vr).xyz;
  float diffuse1 = max(dot(nr, lightdir1), 0);

  // light 2
  float3 lightdir2 = normalize(WLightPos[1] - vr).xyz;
  float diffuse2 = max(dot(nr, lightdir2), 0);

  float final_lighting = (diffuse1+diffuse2);

  float4 r = float4(0,0,0,0); // = pixel; // basic shading
  if (ray.x<CG_FLT_MAX) 
  {
    r = final_lighting * mat; // ray addition
    r.a = parent_coef.y;

    //if (tri_coef.y>=0.05) r = float4(1,0,0,0); // debug: show parts with incomplete bounces
  }
  return r;
}
