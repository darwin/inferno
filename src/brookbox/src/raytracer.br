// raytracer.br
// Purcell type raytracer implementation in BrookGPU
//
 
#include "stdafx.h"

#include "hack.h"
#include "defines.h"
// NO unhack !

/*
samplephases = NUMSAMPLES (primary ray, secondary reflected ray, secondary refracted ray, ...)
shadowphases = lights+1 (0=main ray, 1..(lights+1)=shadows)

[ samplephases*shadowphases
  setup: rayinfo <--> raystate, traverserstate
  [ 
    [ 5x
      traverser: rayinfo, raystate, traverserstate <--> raystate, traverserstate
    ]
    [ 5x
      intersector: rayinfo, raystate, intersectorstate, traverserstate <--> raystate, intersectorstate
    ]
  ]
  shader: framebufferstate <--> framebufferstate // do blending
  dispatcher: raystate, dispatcherstate <--> rayinfo, dispatcherstate
]

*/

//-------------------------------------------------------------------------------------------
/////////////////////////////////////////////////////////////////////////////////////////////
// scene data structures

typedef struct t_voxel_t {
  float trilist;
} t_voxel;
 
typedef struct t_trilist_t {
  float triid;
} t_trilist; 

typedef struct t_triinfo_t {
  float3 v0;
  float3 v1;
  float3 v2;
  float3 n0;
  float3 n1;
  float3 n2;
  float3 color;
  float4 mat;  // base_k, reflection_k, refraction_k, eta
} t_triinfo;

/////////////////////////////////////////////////////////////////////////////////////////////
// kernel data structures

// shortcut: ri
typedef struct t_rayinfo_t {
  float4 info; // [x, y, maxt, weight]
  float3 origin;
  float3 direction;
} t_rayinfo;

// shortcut: rs
typedef struct t_raystate_t {
  float4 state;
} t_raystate;

// shortcut: ts
typedef struct t_traverserstate_t {
  float3 voxel;
  float3 tmax;
} t_traverserstate;

// shortcut: is
typedef struct t_intersectorstate_t {
  float3 tripos;
} t_intersectorstate;

// shortcut: fs
typedef struct t_framebufferstate_t {
  float3 color;
} t_framebufferstate;

// shortcut: ds
typedef struct t_dispatcherstate_t {
  float3 phase; // samplephase, shadowphase, ?
  float4 hitinfo; // triid, u, v, weight
  float3 hitdirection; // x,y,z
  float3 hitnormal; // x,y,z
  float4 hitmat; // cached hit material
} t_dispatcherstate;

/////////////////////////////////////////////////////////////////////////////////////////////
// helper data structures

typedef struct t_camera_t {
  float3 pos;
  float3 dir;
  float2 fov;
  float4 quat;
} t_camera;

typedef struct t_light_t {
  float3 pos;
  float3 color;
} t_light;

// scene buffers (input)
extern t_voxel* scene_voxels;
extern t_trilist* scene_trilist;
extern t_triinfo* scene_triinfos;
extern t_camera* scene_camera;
extern t_light* scene_lights;

// input buffers
extern t_rayinfo* input_rayinfo;
extern t_raystate* input_raystate;
extern t_framebufferstate* input_framebufferstate;
extern t_dispatcherstate* input_dispatcherstate;

// output buffers
extern t_rayinfo* output_rayinfo;
extern t_raystate* output_raystate;
extern t_traverserstate* output_traverserstate;
extern t_intersectorstate* output_intersectorstate;
extern t_framebufferstate* output_framebufferstate;
extern t_dispatcherstate* output_dispatcherstate;

/////////////////////////////////////////////////////////////////////////////////////////////
//-------------------------------------------------------------------------------------------

#ifndef STRUCTURES_ONLY

#include "scene.h"
#include "debug.h"
#include "raytracer.h"

/////////////////////////////////////////////////////////////////////////////////////////////
// kernels
 
kernel void setup(t_rayinfo iri<>, t_raystate irs<>,
                  t_voxel scene_voxels[NUMVOXELS], 
                  out t_raystate ors<>, out t_traverserstate ots<>)
{
  float3 boxa = float3(0,0,0);
  float3 boxb = float3(VOXELSX*VOXELSIZEX, VOXELSY*VOXELSIZEY, VOXELSZ*VOXELSIZEZ);
  float3 voxelsize = float3(VOXELSIZEX, VOXELSIZEY, VOXELSIZEZ);
  float3 vboxa = float3(0,0,0);
  float3 vboxb = float3(VOXELSX, VOXELSY, VOXELSZ);
  float3 s = sign(iri.direction);
  float4 o;
  float3 point;
  float3 t;
  float3 nullray = float3(0,0,0);

  ors = irs;
  
  if (ors.state.x == RAYSTATE_SETUP)
  {
    if (point_in_box(boxa, boxb, iri.origin))
    {
      ors.state.x = RAYSTATE_TRAVERSING;
      point = iri.origin;
    }
    else
    {
      float3 ir = intersect_box(boxa, boxb, iri.origin, iri.direction);
      ors.state.x = ir.x;
      if (ir.x==RAYSTATE_SHADING) ors.state.w = RAYSTATUS_OUT;
      point = iri.origin + (1+FPHAZARD_ENTERINGRAYSHIFT)*ir.y*iri.direction; // FP hazard
    }

    // compute voxel
    ots.voxel = voxel_addr(point);

    // compute tmaxx, tmaxy, tmaxz

    // TODO: optimize
    t = frac(point);
    if (s.x>=0)
    {
      t.x = 1 - t.x;
    }
    if (s.y>=0)
    {
      t.y = 1 - t.y;
    }
    if (s.z>=0)
    {
      t.z = 1 - t.z;
    }

    ots.tmax = t / abs(iri.direction);

    // test first voxel
    // ! warning: same code is in traverser - keep it in sync
    // this is important because traverser does step and then test in voxel
    // without this code, first voxel would be skipped
    if ((float)ors.state.x==RAYSTATE_TRAVERSING)
    {
      t_voxel v;
      v = scene_voxels[VOXELADDR(ots.voxel.x, ots.voxel.y, ots.voxel.z)];
      if (v.trilist>0)
      {
        ors.state.x = RAYSTATE_INTERSECTING;
        ors.state.y = v.trilist+1;
      }
    }

    // "null" ray
    //if (all(iri.direction==nullray))
    if (iri.direction==nullray)
    {
      ors.state.x = RAYSTATE_DISPATCHING;
    }
  }
}  

kernel void traverser(t_rayinfo iri<>, t_raystate irs<>, t_traverserstate its<>, 
                      t_voxel scene_voxels[NUMVOXELS], 
                      out t_raystate ors<>, out t_traverserstate ots<>)
{
  float3 vboxa = float3(0,0,0);
  float3 vboxb = float3(VOXELSX, VOXELSY, VOXELSZ);
  float3 tmax = its.tmax;
  float3 voxel = its.voxel;

  ors = irs;

  if (irs.state.x==RAYSTATE_TRAVERSING)
  {
    // test for iri.info.z (here is stored max t for the ray)
    // if all tmax components are greater than max t, stop traversing
    float3 z = float3(iri.info.z, iri.info.z, iri.info.z);
    float3 c = tmax>=z;
    if (all(c))
    {
      // ray reached the end point (currently feature of shadow rays)
      ors.state.x = RAYSTATE_SHADING;
      ors.state.w = RAYSTATUS_MISSED;
    }
    else
    {
      // step
      t_voxel v;
      float3 rstep = sign(iri.direction);
      float3 rdelta = abs(1 / iri.direction);
      float3 c1;
      float3 c2;

      if (tmax.x < tmax.y) 
      {
        if (tmax.x < tmax.z) 
        {
          voxel.x += rstep.x;
          tmax.x += rdelta.x;
        }
        else
        {
          voxel.z += rstep.z;
          tmax.z += rdelta.z;
        }
      }
      else
      {
        if (tmax.y < tmax.z) 
        {
          voxel.y += rstep.y;
          tmax.y += rdelta.y;
        }
        else
        {
          voxel.z += rstep.z;
          tmax.z += rdelta.z;
        }
      }

      // test voxel to be inside scene
      c1 = voxel>=vboxa;
      c2 = voxel<=vboxb;
      if (all(c1) && all(c2))
      {
        // ! warning: same code is in setup - keep it in sync
        // test for new voxel
        v = scene_voxels[VOXELADDR(voxel.x, voxel.y, voxel.z)];
        if (v.trilist>0)
        {
          ors.state.x = RAYSTATE_INTERSECTING;
          ors.state.y = v.trilist+1;
        }
      }
      else
      {
        // voxel out of scene, ray exited the scene
        ors.state.x = RAYSTATE_SHADING;
        ors.state.w = RAYSTATUS_MISSED;
      }
    }
  }

  ots.tmax = tmax;
  ots.voxel = voxel;
}

kernel void intersector(t_rayinfo iri<>, t_raystate irs<>, t_intersectorstate iis<>, t_traverserstate its<>,
                        t_trilist scene_trilist[NUMTRILIST], t_triinfo scene_triinfos[NUMTRIINFOS],
                        out t_raystate ors<>, out t_intersectorstate ois<>)
{
  ors = irs;
  ois = iis;

  // init block
  if (irs.state.x==RAYSTATE_INTERSECTING && irs.state.y>1)
  {
    ois.tripos.x = irs.state.y-1; // retrieve saved position
    ois.tripos.y = CG_FLT_MAX;
    
    ors.state.y = 0;
    // ors.state.z contains actual shadow ray strength
    ors.state.w = 0; // no hit
  }

  // step block
  if (irs.state.x==RAYSTATE_INTERSECTING)
  {
    t_trilist tl = scene_trilist[ois.tripos.x]; 
    if (tl.triid>=1)
    {
      t_triinfo ti = scene_triinfos[tl.triid];
 
      float4 hit = intersect_triangle(iri.origin, iri.direction, ti.v0, ti.v1, ti.v2);
      if (hit.w)
      {
        // we have a triangle hit here !
        // check hit is inside current voxel
        float3 hitpoint = iri.origin + iri.direction * hit.x;
        float3 voxelsize = float3(VOXELSIZEX, VOXELSIZEY, VOXELSIZEZ);
        float3 voxela = its.voxel*voxelsize;
        float3 voxelb = voxela + voxelsize;
        float3 c1 = voxela<=hitpoint;
        float3 c2 = hitpoint<=voxelb;

        // TODO: optimize
        if (iri.info.z==CG_FLT_MAX)
        {
          // reflect or refract ray
          if (hit.x<ois.tripos.y &&   // intersection is better (closer) than previous
              all(c1) && all(c2) &&   // intersection is inside current voxel
              hit.x<=iri.info.z       // intersection is before ray's end point
              )
          {
            // save hit if it is better than previous AND inside voxel
            ors.state.y = hit.y; // u
            ors.state.z = hit.z; // v
            ors.state.w = tl.triid; // triid
            ois.tripos.y = hit.x;
          }
          // else outside voxel or not better than previous or behind ray's end point
        }
        else
        {
          // shadow ray
          if (all(c1) && all(c2) &&   // intersection is inside current voxel
              hit.x<=iri.info.z       // intersection is before ray's end point
            )
          {
            ors.state.z = ors.state.z * ti.mat.z; // light blocking
            if (ors.state.z<ALMOST_NOLIGHT) ors.state.w = 1; // simulate hard-hit
          }
          // else outside voxel or behind ray's end point
        }
      }
      // else missed

      ois.tripos.x = ois.tripos.x + 1; // advance pointer to next triangle
    }
    else
    {
      // end of list
      if (irs.state.w)
      {
        // some hit, best one is in ors.state.yzw
        ors.state.x = RAYSTATE_SHADING;
      }
      else
      {
        // no hit
        ors.state.x = RAYSTATE_TRAVERSING;
      }
    }
  }
}
   
kernel void dispatcher(t_rayinfo iri<>, t_raystate irs<>, t_dispatcherstate ids<>,  
                       t_triinfo scene_triinfos[NUMTRIINFOS], t_light scene_lights[NUMLIGHTS],
                       out t_rayinfo ori<>, out t_raystate ors<>, out t_dispatcherstate ods<>)
{
  ori = iri;
  ors = irs;
  ods = ids;

  if (irs.state.x==RAYSTATE_DISPATCHING)
  {
    ors.state.x = RAYSTATE_SETUP;

    // main ray handler
    if (ods.phase.y==0)
    {
      // main ray done, decide on it's status
      if (ors.state.w<=0) // ray status is either RAYSTATUS_MISSED or RAYSTATUS_OUT
      {
        // no hit, so skip shadows
        ods.phase.y = NUMLIGHTS;
      }
      else
      {
        // store new hit only when going onto new tree level
        // ods.phase.x == 
        if (ods.phase.x==0 ||
          ods.phase.x==1 ||
          ods.phase.x==2
            // here must be another principle, recursion needs stack !!!
            //ods.phase.x==6 ||
            //ods.phase.x==14
            // ... 
          )
        {
          t_triinfo ti;
          float3 hit;
          float3 barycoord;
          float3 edge1;
          float3 edge2;

          // hit! fill in hitinfo
          ods.hitinfo.xyz = ors.state.wyz;
          ods.hitdirection = -iri.direction;

          // modify weight
          ti = scene_triinfos[ods.hitinfo.x];
          // store incomming ray weight
          ods.hitinfo.w = iri.info.w; 
          ods.hitmat = ti.mat;

          edge1 = ti.v1 - ti.v0;
          edge2 = ti.v2 - ti.v0;
          hit = ti.v0 + ods.hitinfo.y * edge1 + ods.hitinfo.z * edge2;
          barycoord = float3(ods.hitinfo.y, ods.hitinfo.z, 1.0f - ods.hitinfo.y - ods.hitinfo.z);
          ods.hitnormal = normalize(barycoord.x * ti.n1 + barycoord.y * ti.n2 + barycoord.z * ti.n0);

          // note: this shouldn't be needed for 1-sided mode
          // we have 2-sided triangles in the scene
          // flip the normal if viewing direction is on opposite side of the triangle
          if (dot(ods.hitnormal, ods.hitdirection)<0) 
          {
            ods.hitnormal = -ods.hitnormal;
          }
        }
      }
    }
   
    // sub phase incrementor
    ods.phase.y += 1; // inc subphase for next run
    if (ods.phase.y>=NUMLIGHTS+1)
    {
      // all subphases done, go for next sample
      ods.phase.x += 1;
      ods.phase.y = 0;

      // test for all samples dones
      if (ods.phase.x>=NUMSAMPLES)
      {
        ors.state.x = RAYSTATE_DONE;
      }
    }

    // next ray preparer
    {
      t_triinfo ti = scene_triinfos[ods.hitinfo.x];

      float3 edge1 = ti.v1 - ti.v0;
      float3 edge2 = ti.v2 - ti.v0;

      float3 hit = ti.v0 + ods.hitinfo.y * edge1 + ods.hitinfo.z * edge2;

      // determine ray type
      if (ods.phase.y==0)
      {
        float3 normal_vec = normalize(cross(edge1, edge2));

        // prepare main ray
        if (frac((ods.phase.x/2.0))>=0.5) // odd passes are reflected and even are refracted
        {
          // reflected ray
          ori.info.w = ods.hitinfo.w * ods.hitmat.y; // weight current ray by reflection mixing koef
          ori.info.z = CG_FLT_MAX;
          ori.direction = normalize(reflect(-ods.hitdirection, ods.hitnormal));
          ori.origin = hit + FPHAZARD_REFLECTEDRAYSHIFT*ori.direction; // FP hazard
        }
        else
        {
          // refracted ray
          ori.info.w = ods.hitinfo.w * ods.hitmat.z; // weight current ray by refraction mixing koef
          ori.info.z = CG_FLT_MAX;
          ori.direction = normalize(refract(-ods.hitdirection, ods.hitnormal, ti.mat.w));
          ori.origin = hit + FPHAZARD_REFLECTEDRAYSHIFT*ori.direction; // FP hazard
        }
      }
      else
      {
        // prepare shadow ray
        t_light light = scene_lights[ods.phase.y-1];

        float3 light_vec = light.pos - hit;

        // there can be situation triangle is hit from other side than is light positioned
        // and because of FP HAZARD biasing, intersection of shadow ray with triangle is not realized
        // we detect this situation here, and do not send shadow ray if light is on the other side of the triangle
        float side1 = dot(ods.hitnormal, ods.hitdirection);
        float side2 = dot(ods.hitnormal, normalize(light_vec));
        if (sign(side1)==sign(side2)) 
        {
          ori.info.w = ods.hitinfo.w * ods.hitmat.x; // assign weight to shadow ray using base mixing coef
          ori.info.z = length(light_vec); 
          ori.direction = normalize(light_vec);
          ori.origin = hit + FPHAZARD_SHADOWRAYSHIFT*ori.direction; // FP hazard
          ors.state.z = (1/NUMLIGHTS); // initial light ray strength
        }
        else
        {
          // skip the light evaluation if we are on back side

          // NOTE: here should be prepared shading state as we would hit current triangle
          //       i know, that shading shadow ray then does nothing to final color, so i skip shading state
          //       and set dispatching directly
          ors.state.x = RAYSTATE_DISPATCHING;
        }
      }
    }
  }
} 

kernel void shader_simple(t_rayinfo iri<>, t_raystate irs<>, 
                          t_triinfo scene_triinfos[NUMTRIINFOS], 
                          out t_raystate ors<>, out t_framebufferstate ofs<>)
{
  ors = irs;

  if (irs.state.x==RAYSTATE_SHADING)
  {
    // simple shading
    t_triinfo ti = scene_triinfos[irs.state.w];
    ofs.color = ti.color; 
    ors.state.x = RAYSTATE_DONE;
  }
  else
  {
    if (irs.state.x==RAYSTATE_OUT)
    {
      // color for iri which are out of scene bounding box
      ofs.color = float3(0,0,0);
    }
    else
    {
      // color for iri which hit the scene bounding box, but no triangles
      ofs.color = float3(0.2,0.2,0.2);
    }
  } 
}

kernel void shader_flat(t_rayinfo iri<>, t_raystate irs<>, 
                        t_triinfo scene_triinfos[NUMTRIINFOS], t_light scene_lights[NUMLIGHTS],
                        out t_raystate ors<>, out t_framebufferstate ofs<>)
{
  ors = irs;

  if (irs.state.x==RAYSTATE_SHADING)
  {
    // flat shading
    t_triinfo ti = scene_triinfos[irs.state.w];

    t_light light = scene_lights[0];

    float3 edge1 = ti.v1 - ti.v0;
    float3 edge2 = ti.v2 - ti.v0;

    // take center as a hit-point
    float3 hit = ti.v0 + 0.5 * edge1 + 0.5 * edge2; 

    float3 normal_vec = normalize(cross(edge1, edge2));

    float3 light_vec = normalize(light.pos - hit);
    float3 eye_vec = normalize(iri.origin - hit);
    float3 half_vec = normalize(light_vec + eye_vec);

    // calculate diffuse component
    float diffuse = dot(normal_vec, light_vec);

    // calculate specular component
    float specular = dot(normal_vec, half_vec);

    // the lit() function is a handy function in the standard library that 
    // can be used to accelerate your lighting calculations. 
    //
    // this function return a vector containing these values:
    //     result.x = 1.0;  
    //     result.y = max(diffuse, 0);
    //     result.z = if (result.y > 0.0) then pow(specular, 32) else 0.0
    //     result.w = 1.0;

    // use the lit function to compute lighting vector from diffuse and 
    // specular values
    float4 lighting = lit(diffuse, specular, 32);

    float3 white = float3(1,1,1);
    ofs.color = lighting.y * ti.color + lighting.z * white;
    ors.state.x = RAYSTATE_DONE;
  }
  else
  {
    if (irs.state.x==RAYSTATE_OUT)
    {
      // color for iri which are out of scene bounding box
      ofs.color = float3(0,0,0);
    }
    else
    {
      // color for iri which hit the scene bounding box, but no triangles
      ofs.color = float3(0.2,0.2,0.2);
    }
  }
}

kernel void shader_smooth(t_rayinfo iri<>, t_raystate irs<>, 
                          t_triinfo scene_triinfos[NUMTRIINFOS], t_light scene_lights[NUMLIGHTS],
                          out t_raystate ors<>, out t_framebufferstate ofs<>)
{
  ors = irs;

  if (irs.state.x==RAYSTATE_SHADING)
  {
    // smooth shading
    t_triinfo ti = scene_triinfos[irs.state.w];

    t_light light = scene_lights[0];

    float3 edge1 = ti.v1 - ti.v0; // can be precomputed
    float3 edge2 = ti.v2 - ti.v0; // can be precomputed

    // compute hit-point
    float3 hit = ti.v0 + irs.state.y * edge1 + irs.state.z * edge2;

    // float3 normal_vec = normalize(cross(edge1, edge2));
    float3 barycoord = float3(irs.state.y, irs.state.z, 1.0f - irs.state.y - irs.state.z);
    float3 normal_vec = normalize(barycoord.x * ti.n1 + barycoord.y * ti.n2 + barycoord.z * ti.n0);
    
    float3 light_vec = normalize(light.pos - hit);
    float3 eye_vec = normalize(iri.origin - hit);
    float3 half_vec = normalize(light_vec + eye_vec);

    // calculate diffuse component
    float diffuse = dot(normal_vec, light_vec);

    // calculate specular component
    float specular = dot(normal_vec, half_vec);

    // the lit() function is a handy function in the standard library that 
    // can be used to accelerate your lighting calculations. 
    //
    // this function return a vector containing these values:
    //     result.x = 1.0;  
    //     result.y = max(diffuse, 0);
    //     result.z = if (result.y > 0.0) then pow(specular, 32) else 0.0
    //     result.w = 1.0;
  
    // use the lit function to compute lighting vector from diffuse and 
    // specular values
    float4 lighting = lit(diffuse, specular, SPECULAR_EXPONENT);

    float3 white = float3(1,1,1);
    ofs.color = lighting.y * ti.color + lighting.z * white;
    ors.state.x = RAYSTATE_DONE;
  }
  else
  {
    if (irs.state.x==RAYSTATE_OUT)
    {
      // color for iri which are out of scene bounding box
      ofs.color = float3(0,0,0);
    }
    else
    {
      // color for iri which hit the scene bounding box, but no triangles
      ofs.color = float3(0.2,0.2,0.2);
    }
  }
}

kernel void shader(t_rayinfo iri<>, t_raystate irs<>, t_dispatcherstate ids<>, t_framebufferstate ifs<>,
                   t_triinfo scene_triinfos[NUMTRIINFOS], t_light scene_lights[NUMLIGHTS],
                   out t_raystate ors<>, out t_framebufferstate ofs<>)
{
  ors = irs;
  ofs = ifs;

  if (irs.state.x==RAYSTATE_SHADING)
  {
    ors.state.x = RAYSTATE_DISPATCHING;
    if (ids.phase.y==0)
    {
      // main ray here
      if (irs.state.w<=0)
      {
        if (irs.state.w==RAYSTATUS_MISSED && ids.phase.x==0)
        {
          // color for iri which hit the scene bounding box, but no triangles
          ofs.color = float3(0.2,0.2,0.2);
        }
      }
    }
    else
    {
      // shadow ray here
      if (irs.state.w<=0)
      {
        // we have no hit here => do shading
        t_triinfo ti = scene_triinfos[ids.hitinfo.x];

        t_light light = scene_lights[ids.phase.y-1]; // take proper light

        float3 edge1 = ti.v1 - ti.v0; // can be precomputed
        float3 edge2 = ti.v2 - ti.v0; // can be precomputed

        // compute hit-point
        float3 hit = ti.v0 + ids.hitinfo.y * edge1 + ids.hitinfo.z * edge2;

        float3 normal_vec = ids.hitnormal;

        float3 light_vec = normalize(light.pos - hit);
        float3 eye_vec = ids.hitdirection;
        float3 half_vec = normalize(light_vec + eye_vec);
        float3 white = float3(1,1,1);
        float diffuse; 
        float specular;
        float4 lighting;

        // calculate diffuse component
        diffuse = KD*dot(normal_vec, light_vec);

        // calculate specular component
        specular = KS*dot(normal_vec, half_vec);

        // the lit() function is a handy function in the standard library that 
        // can be used to accelerate your lighting calculations. 
        //
        // this function return a vector containing these values:
        //     result.x = 1.0;  
        //     result.y = max(diffuse, 0);
        //     result.z = if (result.y > 0.0) then pow(specular, 32) else 0.0
        //     result.w = 1.0;

        // use the lit function to compute lighting vector from diffuse and 
        // specular values
        lighting = irs.state.z * iri.info.w * lit(diffuse, specular, SPECULAR_EXPONENT);
        
        if (ids.phase.x==0)
          ofs.color = ofs.color + lighting.y * ti.color + lighting.z * white; // blend color to the framebuffer !!!
        else
          ofs.color = ofs.color + lighting.y * ti.color; // blend color to the framebuffer !!!
      }
    }
  }
}

/////////////////////////////////////////////////////////////////////////////////////////////
// raytracer engine part

/////////////////////////////////////////////////////////////////////////////////////////////
// oracle

int oracle(int counter)
{
  static int counter_inner = 0;
  static int counter_dispatcher = NUMRAYPASSES;
  static int last_state = STATE_INTERSECTING;

  int new_state = last_state;

  if (counter>NUMPASSES) return STATE_DONE;

  if (counter_dispatcher==0)
  {
    switch (last_state) {
    case STATE_TRAVERSING:
    case STATE_INTERSECTING:
      new_state = STATE_SHADING;
      break;
    case STATE_SHADING:
      new_state = STATE_DISPATCHING;
      break;
    case STATE_DISPATCHING:
      counter_dispatcher = NUMRAYPASSES;
      new_state = STATE_TRAVERSING;
      break;
    default:
      assert(0);
    }

    last_state = new_state;
    return new_state;
  }
  counter_dispatcher--;

  if (counter_inner==0)
  {
    switch (last_state) {
    case STATE_TRAVERSING:
      counter_inner = 5;
      new_state = STATE_INTERSECTING;
      break;
    case STATE_INTERSECTING:
      counter_inner = 5;
      new_state = STATE_TRAVERSING;
      break;
    }
  }
  counter_inner--;

  last_state = new_state;
  return new_state;
}

/////////////////////////////////////////////////////////////////////////////////////////////
// main entry

int raytracer(const char* filename)
{
  char* state_table[] = { "DONE", "NONE", "TRAVERSING", "INTERSECTING", "SHADING", "DISPATCHING" };

  int flip_dispatcherstate = 0;
  int flip_traverserstate = 0;
  int flip_intersectorstate = 0;
  int flip_raystate = 0;
  int flip_rayinfo = 0;
  int flip_framebufferstate = 0;

  int counter;
  int old_state;
  int new_state;
  int total_tris = 0;

  // runtime
  t_rayinfo a_rayinfo<RAYSX, RAYSY>; // input/output stream
  t_rayinfo b_rayinfo<RAYSX, RAYSY>; // input/output stream
  
  t_raystate a_raystate<RAYSX, RAYSY>; // input/output stream
  t_raystate b_raystate<RAYSX, RAYSY>; // input/output stream
  t_traverserstate a_traverserstate<RAYSX, RAYSY>; // input/output stream
  t_traverserstate b_traverserstate<RAYSX, RAYSY>; // input/output stream
  t_intersectorstate a_intersectorstate<RAYSX, RAYSY>; // input/output stream
  t_intersectorstate b_intersectorstate<RAYSX, RAYSY>; // input/output stream
  t_dispatcherstate a_dispatcherstate<RAYSX, RAYSY>; // input/output stream
  t_dispatcherstate b_dispatcherstate<RAYSX, RAYSY>; // input/output stream
  t_framebufferstate a_framebufferstate<RAYSX, RAYSY>; // input/output stream
  t_framebufferstate b_framebufferstate<RAYSX, RAYSY>; // input/output stream

  // scene
  t_voxel stream_scene_voxels<NUMVOXELS>; // input stream
  t_trilist stream_scene_trilist<NUMTRILIST>; // input stream
  t_triinfo stream_scene_triinfos<NUMTRIINFOS>; // input stream
  t_light stream_scene_lights<NUMLIGHTS_NOHACK>; // input stream

  printf("loading & building scene '%s' ...\n", filename);
  if (alloc_scene()) fail("unable to allocate scene");
  if (load_scene(filename, &total_tris)) fail("unable to load scene");
  if (build_scene(total_tris)) fail("unable to build scene");

  printf("initializing engine ...\n");
  if (init_engine()) fail("unable to setup engine");

  printf("here we go !\n");

  // read scene into streams
  streamRead(stream_scene_voxels, scene_voxels);
  streamRead(stream_scene_trilist, scene_trilist);
  streamRead(stream_scene_triinfos, scene_triinfos);
  streamRead(stream_scene_lights, scene_lights);

  // read initial engine state into streams
  streamRead(DSTSTREAM(rayinfo), input_rayinfo); FLIP(rayinfo);
  streamRead(DSTSTREAM(raystate), input_raystate); FLIP(raystate);
  streamRead(DSTSTREAM(framebufferstate), input_framebufferstate); FLIP(framebufferstate);
  streamRead(DSTSTREAM(dispatcherstate), input_dispatcherstate); FLIP(dispatcherstate);

  counter=0;
  old_state = STATE_NONE;
  while (true) // raytracer loop
  {
    new_state = oracle(counter); // ask oracle for new state
    printf("engine step %03d [%15s, %15s]: ", counter, state_table[old_state], state_table[new_state]);
    if (new_state==STATE_DONE) 
    {
      printf("exiting the loop ...\n");
      break; // exit the loop
    }

    // state machine
    switch (STATECODE(old_state, new_state)) {

    case STATECODE(STATE_DISPATCHING, STATE_TRAVERSING):
    case STATECODE(STATE_NONE, STATE_TRAVERSING):
      {
//        streamWrite(SRCSTREAM(rayinfo), output_rayinfo);
//        display_rayinfo();

        printf("setup\n");
        setup(SRCSTREAM(rayinfo), SRCSTREAM(raystate),
          stream_scene_voxels, 
          DSTSTREAM(raystate), DSTSTREAM(traverserstate)); 
        FLIP(raystate); FLIP(traverserstate);
      }
      break;

    case STATECODE(STATE_INTERSECTING, STATE_TRAVERSING):
    case STATECODE(STATE_TRAVERSING, STATE_TRAVERSING):
      {
        printf("traverser\n");
        traverser(SRCSTREAM(rayinfo), SRCSTREAM(raystate), SRCSTREAM(traverserstate), 
          stream_scene_voxels, 
          DSTSTREAM(raystate), DSTSTREAM(traverserstate));
        FLIP(raystate); FLIP(traverserstate);
      }
      break;
    
    case STATECODE(STATE_TRAVERSING, STATE_INTERSECTING):
    case STATECODE(STATE_INTERSECTING, STATE_INTERSECTING):
      {
        printf("intersector\n");
        intersector(SRCSTREAM(rayinfo), SRCSTREAM(raystate), SRCSTREAM(intersectorstate), SRCSTREAM(traverserstate),
          stream_scene_trilist, stream_scene_triinfos,
          DSTSTREAM(raystate), DSTSTREAM(intersectorstate));
        FLIP(raystate); FLIP(intersectorstate);
      }
      break;

    case STATECODE(STATE_TRAVERSING, STATE_SHADING):
    case STATECODE(STATE_INTERSECTING, STATE_SHADING):
      {
        //streamWrite(SRCSTREAM(raystate), output_raystate);
        //display_raystate();

        printf("shader\n");
        shader(SRCSTREAM(rayinfo), SRCSTREAM(raystate), SRCSTREAM(dispatcherstate), SRCSTREAM(framebufferstate),
          stream_scene_triinfos, stream_scene_lights,
          DSTSTREAM(raystate), DSTSTREAM(framebufferstate));
        FLIP(raystate); FLIP(framebufferstate);

        streamWrite(SRCSTREAM(framebufferstate), output_framebufferstate);
        display_framebuffer();

      }
      break;

    case STATECODE(STATE_SHADING, STATE_DISPATCHING):
      {
        printf("dispatcher\n");
        dispatcher(SRCSTREAM(rayinfo), SRCSTREAM(raystate), SRCSTREAM(dispatcherstate),
          stream_scene_triinfos, stream_scene_lights,
          DSTSTREAM(rayinfo), DSTSTREAM(raystate), DSTSTREAM(dispatcherstate)
          );
        FLIP(rayinfo); FLIP(raystate); FLIP(dispatcherstate);

//        streamWrite(SRCSTREAM(raystate), output_raystate);
//        display_raystate();

        // debug
//        streamWrite(SRCSTREAM(dispatcherstate), output_dispatcherstate);
//        display_dispatcherstate();
        
//        streamWrite(SRCSTREAM(rayinfo), output_rayinfo);
//        display_rayinfo();
      }
      break;

    default:
      assert(0); // state change not implemented
    }

    old_state = new_state;
    counter++;
  }

//  streamWrite(SRCSTREAM(raystate), output_raystate);
//  display_raystate();
/*
  printf("shader work\n");
 
  switch (SHADING) {
  case SHADING_SIMPLE: 
    shader_simple(SRCSTREAM(rayinfo), 
      SRCSTREAM(raystate), 
      stream_scene_triinfos, 
      DSTSTREAM(raystate), framebufferstate);
    FLIP(raystate); 
    break;

  case SHADING_FLAT: 
    shader_flat(SRCSTREAM(rayinfo), 
      SRCSTREAM(raystate), 
      stream_scene_triinfos, stream_scene_lights,
      DSTSTREAM(raystate), framebufferstate);
    FLIP(raystate); 
    break;

  case SHADING_SMOOTH: 
    shader_smooth(SRCSTREAM(rayinfo), 
      SRCSTREAM(raystate), 
      stream_scene_triinfos, stream_scene_lights,
      DSTSTREAM(raystate), framebufferstate);
    FLIP(raystate); 
    break;
  }
*/
  
  // result framebuffer
  streamWrite(SRCSTREAM(framebufferstate), output_framebufferstate);
  display_framebuffer();

  // cleanup
  printf("cleaning engine ...\n");
  clean_engine();
  
  printf("cleaning scene ...\n");
  clean_scene();

  return 0;
}

#endif // STRUCTURES_ONLY
